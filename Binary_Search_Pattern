General Template
int l = 0, r = n-1;
while(l <= r) {
	int mid = l + (r-l)/2;
	if(nums[mid] == target)
	    return true;
	if(nums[mid] < target)
	    l = mid + 1;
	else
	    r = mid - 1;
}
Integer overflow: Why l+(r-l)/2?
Why should we do l + (r-l)/2 instead of (l+r)/2?
Imagine Integer.MAX_VALUE=100
if l = 80 and r = 90
mid = (l+r)/2 -> 180/2 -> 90
(BUT WAIT 180 doesn't fit into int size so it's overflow, that is why it's best to use l + (diff)/2)
Classic problem: Find the target in the sorted array
public int getIndex(int[] nums, int target) {
	int l = 0, r = nums.length-1;
	while(l <= r) {
		int mid = l + (r-l)/2;
		if(nums[mid] == target) 
			return;
		else if(nums[mid] < target)
			l = mid + 1;
		else
			r = mid - 1;
	}
}
Get first index of the target
This is also nothing but the first occurrence of target element in the nums list
getSmallestIndexOfTarget(nums, target)
Get last index of the target
It's EXACTLY SAME but we should find the insert position of target+1
getSmallestIndexOfTarget(nums, target + 1)
public static int getSmallestIndexOfTarget(int[] nums, int target) {
	int n = nums.length-1, l = 0, r = n, res = -1;
	while(l <= r) {
		int mid = l + (r-l)/2;
		if(target <= nums[mid]) {
			res = mid;
			r = mid - 1;
		} else {
			l = mid + 1;
		}
	}
	return res;
}
Modified Binary Search:
What if the array is rotated by some degree, just find the pivot and add an offset
class Solution {
    public int search(int[] nums, int target) {
        // Step 1: find the pivot
        int l = 0, r = nums.length-1, res = 0;
        while(l <= r) {
            int mid = l + (r-l)/2;
            if(nums[0] <= nums[mid]) {
                res = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }

        int n = nums.length;
        l = res + 1; // Next of pivot
        r = res + 1 + nums.length - 1; // l + (n-1)
        while(l <= r) {
            int mid = l + (r-l)/2;
            int realMid =  mid % n;
            if(nums[realMid] == target)
                return realMid;
            if(target < nums[realMid])
                r = mid - 1;
            else
                l = mid + 1;
        }
        return -1;
    }
}
Other Examples:
find-minimum-in-rotated-sorted-array
Single Element in a Sorted Array
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n = nums.length, l = 0, r = nums.length-1, res = -1;
        while(l <= r) {
            int mid = l + (r-l)/2;
            // even index
            if(mid % 2 == 0) {
                // Everything else in the left is correct
                if(mid + 1 < n && nums[mid] == nums[mid + 1]) {
                    l = mid + 2;
                } else {
                    res = mid;
                    r = mid - 1;
                }
            } else {
                if(mid > 0 && nums[mid] == nums[mid-1])
                    l = mid + 1;
                else {
                    res = mid;
                    r = mid - 1;
                }
            }
        }
        return nums[res];
    }
}
Another classic pattern: Finding the search space and exploring
Capacity to Ship packages in D Days | Find search space and Binary Search


Find the search space, The MINIMUM and MAXIMUM boundaries
In this case, we want to ship within D days, get the minimum capacity
If we found a capacity C that ships within <= D days, reduce the capacity by updating res = mid and explore left side by right = mid - 1
class Solution {
    public int shipWithinDays(int[] weights, int days) {
        int l = weights[0], r = 0;
        for(int w: weights) {
            l = Math.min(l, w);
            r += w;
        }
        
        int res = -1;
        while(l <= r) {
            int mid = l + (r-l)/2;
            if(getDaysByCapacity(weights, mid) <= days) {
                res = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return res;
    }
    
    public int getDaysByCapacity(int[] weights, int capacity) {
        int totalDays = 0, temp = 0;
        for(int w : weights) {
            if(w > capacity)
                return Integer.MAX_VALUE;
            temp += w;
            if(temp > capacity) {
                temp = w;
                totalDays++;
            }
        }
        // System.out.println("capacity " + capacity + " days = " + totalDays + 1);
        return totalDays+1;
    }
}
Other Examples:


Koko Eating Bananas
